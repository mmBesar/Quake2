name: Build and Release Binaries (Docker QEMU)

on:
  push:
    branches: [ upstream ]
    tags:    [ 'QUAKE2_*' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            suffix: linux-amd64
            platform: linux/amd64
          - arch: arm64
            suffix: linux-arm64
            platform: linux/arm64/v8

    steps:
      - name: Checkout upstream
        uses: actions/checkout@v4
        with:
          ref: upstream
          fetch-depth: 0

      - name: Determine TAG
        id: tag
        run: |
          echo "TAG=$(git tag --sort=-creatordate | grep QUAKE2_ | head -1)" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build for ${{ matrix.arch }}
        run: |
          cat > Dockerfile << 'EOF'
          FROM ubuntu:22.04
          
          RUN apt-get update && \
              DEBIAN_FRONTEND=noninteractive apt-get install -y \
                build-essential cmake pkg-config zip \
                libsdl2-dev libsdl2-image-dev \
                libopenal-dev libcurl4-openssl-dev \
                libx11-dev libxi-dev libgl1-mesa-dev zlib1g-dev && \
              rm -rf /var/lib/apt/lists/*
          
          WORKDIR /src
          COPY . .
          
          RUN mkdir build && cd build && \
              cmake .. \
                -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DRUNTIME_OUTPUT_DIRECTORY=release && \
              make -j$(nproc)
          
          # Copy built files to output directory
          RUN mkdir -p /output && \
              find build -name "quake2" -type f -exec cp {} /output/ \; && \
              find build -name "q2ded" -type f -exec cp {} /output/ \; && \
              find build -name "game.so" -type f -exec cp {} /output/ \; && \
              find build -name "ref_*.so" -type f -exec cp {} /output/ \; && \
              ls -la /output/
          EOF
          
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --output type=local,dest=./output \
            .
          
          # Debug: show what was actually built
          echo "Contents of output directory:"
          find output -type f -ls || true

      - name: Package Debug ZIP
        run: |
          OUT=Quake2-${{ matrix.suffix }}-debug
          mkdir -p $OUT/baseq2
          
          # Copy files if they exist
          [ -f output/quake2 ] && cp output/quake2 $OUT/
          [ -f output/q2ded ] && cp output/q2ded $OUT/
          [ -f output/game.so ] && cp output/game.so $OUT/baseq2/
          for ref_file in output/ref_*.so; do
            [ -f "$ref_file" ] && cp "$ref_file" $OUT/
          done
          
          # Check what we actually have
          echo "Debug package contents:"
          find $OUT -type f -ls || true
          
          zip -r quake2-${{ matrix.suffix }}-${{ env.TAG }}-debug.zip $OUT

      - name: Strip & Package Release ZIP
        run: |
          OUT=Quake2-${{ matrix.suffix }}
          mkdir -p $OUT/baseq2
          
          # Copy files if they exist
          [ -f output/quake2 ] && cp output/quake2 $OUT/
          [ -f output/q2ded ] && cp output/q2ded $OUT/
          [ -f output/game.so ] && cp output/game.so $OUT/baseq2/
          for ref_file in output/ref_*.so; do
            [ -f "$ref_file" ] && cp "$ref_file" $OUT/
          done
          
          # Strip binaries - Docker strips work across architectures
          if [ -f $OUT/quake2 ] || [ -f $OUT/q2ded ] || [ -f $OUT/*.so ]; then
            docker run --rm --platform ${{ matrix.platform }} \
              -v $(pwd)/$OUT:/workspace ubuntu:22.04 \
              sh -c "apt-get update && apt-get install -y binutils && \
                     strip /workspace/quake2 /workspace/q2ded /workspace/*.so 2>/dev/null || true"
          fi
          
          # Check what we actually have
          echo "Release package contents:"
          find $OUT -type f -ls || true
          
          zip -r quake2-${{ matrix.suffix }}-${{ env.TAG }}.zip $OUT

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          files: |
            quake2-${{ matrix.suffix }}-${{ env.TAG }}.zip
            quake2-${{ matrix.suffix }}-${{ env.TAG }}-debug.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
