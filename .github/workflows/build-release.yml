name: Build YQuake2 Multi-Architecture Binaries

on:
  # Manual trigger for testing
  workflow_dispatch:
  
  # Trigger when upstream branch is updated
  push:
    branches:
      - upstream
  
  # Trigger on pull requests to upstream branch
  pull_request:
    branches:
      - upstream

env:
  # Build configuration
  BUILD_TYPE: Release
  
jobs:
  # Job to get the latest tag from upstream
  get-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag that matches the QUAKE2_* pattern
          LATEST_TAG=$(git tag -l "QUAKE2_*" | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No QUAKE2_* tags found, using default"
            LATEST_TAG="QUAKE2_8_51"
          fi
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"
          
      - name: Check if release exists
        id: check_tag
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build job for both architectures
  build:
    runs-on: ubuntu-latest
    needs: get-tag
    strategy:
      matrix:
        arch: [amd64, arm64]
        build_type: [release, debug]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          
      - name: Create build environment
        run: |
          TAG="${{ needs.get-tag.outputs.tag }}"
          ARCH="${{ matrix.arch }}"
          BUILD_TYPE="${{ matrix.build_type }}"
          
          # Set architecture-specific variables
          if [ "$ARCH" = "amd64" ]; then
            DOCKER_PLATFORM="linux/amd64"
            DOCKER_ARCH="amd64"
          else
            DOCKER_PLATFORM="linux/arm64"
            DOCKER_ARCH="arm64"
          fi
          
          # Set build type specific variables
          if [ "$BUILD_TYPE" = "debug" ]; then
            MAKE_DEBUG="DEBUG=1"
            BUILD_SUFFIX="-debug"
          else
            MAKE_DEBUG=""
            BUILD_SUFFIX=""
          fi
          
          # Create Dockerfile for build environment
          cat > Dockerfile <<EOF
          FROM --platform=$DOCKER_PLATFORM ubuntu:22.04
          
          # Prevent interactive prompts
          ENV DEBIAN_FRONTEND=noninteractive
          
          # Install build dependencies
          RUN apt-get update && apt-get install -y \
              build-essential \
              gcc \
              g++ \
              make \
              cmake \
              pkg-config \
              libgl1-mesa-dev \
              libglu1-mesa-dev \
              libsdl2-dev \
              libogg-dev \
              libvorbis-dev \
              libopenal-dev \
              libcurl4-openssl-dev \
              zlib1g-dev \
              git \
              && rm -rf /var/lib/apt/lists/*
          
          # Create working directory
          WORKDIR /build
          
          # Copy source code
          COPY . .
          
          # Build the project
          RUN make clean && make $MAKE_DEBUG -j\$(nproc) all
          
          # Create output structure
          RUN mkdir -p /output/quake2-linux-$ARCH && \\
              cp release/quake2 /output/quake2-linux-$ARCH/ && \\
              cp release/q2ded /output/quake2-linux-$ARCH/ && \\
              cp release/ref_gl1.so /output/quake2-linux-$ARCH/ && \\
              cp release/ref_gl3.so /output/quake2-linux-$ARCH/ && \\
              cp release/ref_gles3.so /output/quake2-linux-$ARCH/ && \\
              cp release/ref_soft.so /output/quake2-linux-$ARCH/ && \\
              mkdir -p /output/quake2-linux-$ARCH/baseq2 && \\
              cp release/baseq2/game.so /output/quake2-linux-$ARCH/baseq2/
          EOF
          
          # Store variables for later steps
          echo "DOCKER_PLATFORM=$DOCKER_PLATFORM" >> $GITHUB_ENV
          echo "DOCKER_ARCH=$DOCKER_ARCH" >> $GITHUB_ENV
          echo "BUILD_SUFFIX=$BUILD_SUFFIX" >> $GITHUB_ENV
          echo "MAKE_DEBUG=$MAKE_DEBUG" >> $GITHUB_ENV
          
      - name: Build YQuake2
        run: |
          TAG="${{ needs.get-tag.outputs.tag }}"
          ARCH="${{ matrix.arch }}"
          BUILD_TYPE="${{ matrix.build_type }}"
          
          # Build using Docker
          docker build \
            --platform=$DOCKER_PLATFORM \
            --build-arg MAKE_DEBUG="$MAKE_DEBUG" \
            -t yquake2-build:$ARCH-$BUILD_TYPE \
            .
          
          # Extract built files
          docker run --rm \
            --platform=$DOCKER_PLATFORM \
            -v $(pwd)/output:/host_output \
            yquake2-build:$ARCH-$BUILD_TYPE \
            cp -r /output/. /host_output/
            
      - name: Create release package
        run: |
          TAG="${{ needs.get-tag.outputs.tag }}"
          ARCH="${{ matrix.arch }}"
          BUILD_TYPE="${{ matrix.build_type }}"
          
          cd output
          
          # Verify all required files exist
          REQUIRED_FILES=(
            "quake2-linux-$ARCH/quake2"
            "quake2-linux-$ARCH/q2ded"
            "quake2-linux-$ARCH/ref_gl1.so"
            "quake2-linux-$ARCH/ref_gl3.so"
            "quake2-linux-$ARCH/ref_gles3.so"
            "quake2-linux-$ARCH/ref_soft.so"
            "quake2-linux-$ARCH/baseq2/game.so"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            fi
          done
          
          # Create ZIP archive
          ZIP_NAME="quake2-linux-$ARCH-$TAG$BUILD_SUFFIX.zip"
          zip -r "$ZIP_NAME" "quake2-linux-$ARCH"
          
          # Verify ZIP contents
          echo "ZIP contents:"
          unzip -l "$ZIP_NAME"
          
          # Move to artifacts directory
          mkdir -p ../artifacts
          mv "$ZIP_NAME" ../artifacts/
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quake2-linux-${{ matrix.arch }}-${{ needs.get-tag.outputs.tag }}${{ env.BUILD_SUFFIX }}
          path: artifacts/
          retention-days: 30

  # Release job - only runs if tag doesn't exist
  release:
    runs-on: ubuntu-latest
    needs: [get-tag, build]
    if: needs.get-tag.outputs.tag_exists == 'false'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Prepare release files
        run: |
          TAG="${{ needs.get-tag.outputs.tag }}"
          
          # Create release directory
          mkdir -p release
          
          # Move all ZIP files to release directory
          find artifacts/ -name "*.zip" -exec mv {} release/ \;
          
          # List files for verification
          echo "Release files:"
          ls -la release/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-tag.outputs.tag }}
          name: "YQuake2 ${{ needs.get-tag.outputs.tag }}"
          files: release/*
          body: |
            # YQuake2 ${{ needs.get-tag.outputs.tag }} - Multi-Architecture Release
            
            This release contains Linux binaries for both AMD64 and ARM64 architectures.
            
            ## Files included:
            - `quake2-linux-amd64-${{ needs.get-tag.outputs.tag }}.zip` - AMD64 Release build
            - `quake2-linux-amd64-${{ needs.get-tag.outputs.tag }}-debug.zip` - AMD64 Debug build
            - `quake2-linux-arm64-${{ needs.get-tag.outputs.tag }}.zip` - ARM64 Release build
            - `quake2-linux-arm64-${{ needs.get-tag.outputs.tag }}-debug.zip` - ARM64 Debug build
            
            ## Each archive contains:
            ```
            quake2-linux-<arch>/
            â”œâ”€â”€ baseq2/
            â”‚   â””â”€â”€ game.so
            â”œâ”€â”€ q2ded
            â”œâ”€â”€ quake2
            â”œâ”€â”€ ref_gl1.so
            â”œâ”€â”€ ref_gl3.so
            â”œâ”€â”€ ref_gles3.so
            â””â”€â”€ ref_soft.so
            ```
            
            Built from upstream YQuake2 repository.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update release status
        run: |
          TAG="${{ needs.get-tag.outputs.tag }}"
          echo "âœ… Released YQuake2 $TAG with multi-architecture binaries"
          echo "ðŸ“¦ Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"
