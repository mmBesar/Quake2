name: Build and Release Quake2 Binaries (Multi-Arch)

on:
  push:
    branches: [ upstream ]
    tags:    [ 'QUAKE2_*' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            suffix: linux-amd64
            platform: linux/amd64
            output: output-amd64
          - arch: arm64
            suffix: linux-arm64
            platform: linux/arm64/v8
            output: output-arm64

    steps:
      - name: Checkout upstream
        uses: actions/checkout@v4
        with:
          ref: upstream
          fetch-depth: 0

      - name: Determine latest QUAKE2_ tag
        id: get_tag
        run: |
          echo "TAG=$(git tag --sort=-creatordate | grep QUAKE2_ | head -n1)" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Quake2 Binaries for ${{ matrix.arch }}
        run: |
          mkdir -p ${{ matrix.output }}

          cat > Dockerfile.build << 'EOF'
          FROM ubuntu:22.04
          RUN apt-get update && \
              DEBIAN_FRONTEND=noninteractive apt-get install -y \
              build-essential cmake pkg-config zip \
              libsdl2-dev libsdl2-image-dev \
              libopenal-dev libcurl4-openssl-dev \
              libx11-dev libxi-dev libgl1-mesa-dev zlib1g-dev && \
              rm -rf /var/lib/apt/lists/*
          WORKDIR /src
          COPY . .
          RUN test -f CMakeLists.txt || (echo "Missing CMakeLists.txt!" && false)
          RUN cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DCMAKE_INSTALL_PREFIX=/out \
                -DRUNTIME_OUTPUT_DIRECTORY=build/release && \
              cmake --build build --parallel && \
              cmake --install build
          EOF

          docker buildx build \
            --platform ${{ matrix.platform }} \
            --file Dockerfile.build \
            --output type=local,dest=${{ matrix.output }} \
            .

      - name: Show Output Structure
        run: |
          echo "==> Files in ${{ matrix.output }}"
          find ${{ matrix.output }}

      - name: Package Debug ZIP
        run: |
          OUT=Quake2-${{ matrix.suffix }}-debug
          mkdir -p $OUT/baseq2
          cp ${{ matrix.output }}/quake2         $OUT/ || echo "No quake2"
          cp ${{ matrix.output }}/q2ded          $OUT/ || echo "No q2ded"
          cp ${{ matrix.output }}/ref_*.so       $OUT/ || echo "No ref_*.so"
          cp ${{ matrix.output }}/baseq2/game.so $OUT/baseq2/ || echo "No game.so"
          zip -r quake2-${{ matrix.suffix }}-${{ env.TAG }}-debug.zip $OUT

      - name: Strip & Package Release ZIP
        run: |
          OUT=Quake2-${{ matrix.suffix }}
          mkdir -p $OUT/baseq2
          cp ${{ matrix.output }}/quake2         $OUT/ || echo "No quake2"
          cp ${{ matrix.output }}/q2ded          $OUT/ || echo "No q2ded"
          cp ${{ matrix.output }}/ref_*.so       $OUT/ || echo "No ref_*.so"
          cp ${{ matrix.output }}/baseq2/game.so $OUT/baseq2/ || echo "No game.so"

          docker run --rm --platform ${{ matrix.platform }} \
            -v $(pwd)/$OUT:/workspace ubuntu:22.04 \
            sh -c "apt-get update && apt-get install -y binutils && \
                   strip /workspace/quake2 /workspace/q2ded /workspace/*.so 2>/dev/null || true"

          zip -r quake2-${{ matrix.suffix }}-${{ env.TAG }}.zip $OUT

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          files: |
            quake2-${{ matrix.suffix }}-${{ env.TAG }}.zip
            quake2-${{ matrix.suffix }}-${{ env.TAG }}-debug.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
