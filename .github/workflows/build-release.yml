name: Build & Publish yquake2 Binaries

on:
  workflow_dispatch:
  push:
    branches:
      - upstream

permissions:
  contents: write

jobs:
  build:
    name: Build & Publish Binaries
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - arch: amd64
            triple: x86_64-linux-gnu
            make_arch: linux-x86_64
          - arch: arm64
            triple: aarch64-linux-gnu
            make_arch: linux-aarch64

    steps:
      - name: Checkout full history & tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine latest upstream tag
        id: get_tag
        run: |
          git fetch --tags
          latest=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          echo "latest=$latest" >> $GITHUB_OUTPUT

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config libsdl2-dev zlib1g-dev \
            libsdl2-dev:arm64 zlib1g-dev:arm64
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y \
              gcc-${{ matrix.triple }} \
              g++-${{ matrix.triple }} \
              binutils-${{ matrix.triple }}
          fi

      - name: Build RELEASE & ZIP
        run: |
          make clean
          make BUILD=release ARCH=${{ matrix.make_arch }} \
               CC=${{ matrix.triple }}-gcc \
               CXX=${{ matrix.triple }}-g++
          mkdir -p out
          zip -j out/quake2-linux-${{ matrix.arch }}-${{ steps.get_tag.outputs.latest }}.zip \
            quake2 q2ded ref_*.so baseq2/game.so

      - name: Build DEBUG & ZIP
        run: |
          make clean
          make BUILD=debug ARCH=${{ matrix.make_arch }} \
               CC=${{ matrix.triple }}-gcc \
               CXX=${{ matrix.triple }}-g++
          zip -j out/quake2-linux-${{ matrix.arch }}-${{ steps.get_tag.outputs.latest }}-debug.zip \
            quake2 q2ded ref_*.so baseq2/game.so

      - name: Create or update GitHub Release
        id: create_release
        uses: peter-evans/create-or-update-release@v4
        with:
          tag_name: ${{ steps.get_tag.outputs.latest }}
          release_name: ${{ steps.get_tag.outputs.latest }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/*.zip
          asset_name: ''           # will default to each ZIPâ€™s basename
          asset_content_type: application/zip
