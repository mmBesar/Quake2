name: Build yquake2 Multi-arch Release

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no changes'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - upstream
  schedule:
    # Check for upstream updates every 6 hours
    - cron: '0 */6 * * *'

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      latest_tag: ${{ steps.check.outputs.latest_tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for updates or manual trigger
      id: check
      run: |
        # Get the latest tag from upstream
        LATEST_TAG=$(git tag --sort=-version:refname | head -n1)
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        
        # Check if this is a manual trigger
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Manual trigger detected"
          echo "should_build=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check if there are any releases for this tag
        if gh release view "$LATEST_TAG" >/dev/null 2>&1; then
          echo "Release for $LATEST_TAG already exists"
          echo "should_build=false" >> $GITHUB_OUTPUT
        else
          echo "No release found for $LATEST_TAG, should build"
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-matrix:
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
      fail-fast: false
    outputs:
      tag: ${{ needs.check-updates.outputs.latest_tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: upstream

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build for ${{ matrix.arch }}
      run: |
        # Determine platform
        if [[ "${{ matrix.arch }}" == "amd64" ]]; then
          PLATFORM="linux/amd64"
        else
          PLATFORM="linux/arm64"
        fi
        
        # Create build script
        cat > build.sh << 'EOF'
        #!/bin/bash
        set -e
        
        ARCH=$1
        TAG=$2
        
        echo "Building yquake2 for $ARCH"
        
        # Install dependencies
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y \
            build-essential \
            libgl1-mesa-dev \
            libsdl2-dev \
            libopenal-dev \
            zip \
            file
        
        # Build with debug symbols, but ignore format-truncation warnings
        export CFLAGS="-g -O2 -Wno-format-truncation"
        export LDFLAGS="-g"
        
        # Clean and build
        make clean || true
        make -j$(nproc) || {
            echo "Build failed, checking for built files..."
            find . -name "*.so" -o -name "quake2" -o -name "q2ded" | head -10
            echo "Continuing with available files..."
        }
        
        # Create output directory structure
        mkdir -p /output/quake2-linux-$ARCH
        cd /output/quake2-linux-$ARCH
        
        # Copy the built files in the expected structure
        mkdir -p baseq2
        
        # Copy files if they exist
        if [[ -f /src/release/baseq2/game.so ]]; then
            cp /src/release/baseq2/game.so baseq2/
        else
            echo "ERROR: game.so not found"
            exit 1
        fi
        
        if [[ -f /src/release/quake2 ]]; then
            cp /src/release/quake2 .
        else
            echo "ERROR: quake2 binary not found"
            exit 1
        fi
        
        if [[ -f /src/release/q2ded ]]; then
            cp /src/release/q2ded .
        else
            echo "ERROR: q2ded binary not found"
            exit 1
        fi
        
        # Copy renderer libraries
        for renderer in ref_gl1.so ref_gl3.so ref_gles3.so ref_soft.so; do
            if [[ -f /src/release/$renderer ]]; then
                cp /src/release/$renderer .
            else
                echo "ERROR: $renderer not found"
                exit 1
            fi
        done
        
        # Verify all files are present
        echo "Verifying build output:"
        ls -la
        ls -la baseq2/
        
        # Create release version (stripped)
        cd /output
        cp -r quake2-linux-$ARCH quake2-linux-$ARCH-release
        
        # Strip debug symbols from release version
        strip quake2-linux-$ARCH-release/quake2
        strip quake2-linux-$ARCH-release/q2ded
        strip quake2-linux-$ARCH-release/baseq2/game.so
        strip quake2-linux-$ARCH-release/ref_*.so
        
        # Create debug version (keep symbols)
        cp -r quake2-linux-$ARCH quake2-linux-$ARCH-debug
        
        # Create archives
        zip -r "quake2-linux-$ARCH-$TAG.zip" quake2-linux-$ARCH-release/
        zip -r "quake2-linux-$ARCH-$TAG-debug.zip" quake2-linux-$ARCH-debug/
        
        echo "Build completed successfully"
        ls -la *.zip
        
        # Show file sizes for verification
        echo "File sizes:"
        du -h *.zip
        EOF
        
        chmod +x build.sh
        mkdir -p output
        
        # Run the build in container
        docker run --rm \
          --platform $PLATFORM \
          -v $(pwd):/src \
          -v $(pwd)/output:/output \
          -w /src \
          ubuntu:22.04 \
          bash -c "./build.sh ${{ matrix.arch }} ${{ needs.check-updates.outputs.latest_tag }}"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: quake2-linux-${{ matrix.arch }}-${{ needs.check-updates.outputs.latest_tag }}
        path: output/*.zip
        retention-days: 1

  create-release:
    needs: [check-updates, build-matrix]
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p ./release-assets
        find ./artifacts -name "*.zip" -exec cp {} ./release-assets/ \;
        
        echo "Release assets prepared:"
        ls -la ./release-assets/
        
        # Verify we have all 4 expected files
        expected_files=(
          "quake2-linux-amd64-${{ needs.check-updates.outputs.latest_tag }}.zip"
          "quake2-linux-amd64-${{ needs.check-updates.outputs.latest_tag }}-debug.zip"
          "quake2-linux-arm64-${{ needs.check-updates.outputs.latest_tag }}.zip"
          "quake2-linux-arm64-${{ needs.check-updates.outputs.latest_tag }}-debug.zip"
        )
        
        for file in "${expected_files[@]}"; do
          if [[ ! -f "./release-assets/$file" ]]; then
            echo "ERROR: Missing expected file: $file"
            exit 1
          fi
        done
        
        echo "All expected files are present!"

    - name: Create or update release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG: ${{ needs.check-updates.outputs.latest_tag }}
      run: |
        # Check if release already exists
        if gh release view "$TAG" >/dev/null 2>&1; then
          echo "Release $TAG already exists, updating..."
          
          # Delete existing assets
          gh release view "$TAG" --json assets --jq '.assets[].name' | while read asset; do
            if [[ "$asset" =~ ^quake2-linux-(amd64|arm64)-.* ]]; then
              gh release delete-asset "$TAG" "$asset" --yes || true
            fi
          done
          
          # Upload new assets
          gh release upload "$TAG" ./release-assets/*.zip --clobber
        else
          echo "Creating new release $TAG..."
          
          # Create release notes
          cat > release-notes.md << EOF
        # Yamagi Quake II $TAG - Multi-arch Linux Build
        
        This is an automated build of Yamagi Quake II $TAG for Linux systems.
        
        ## Available Downloads
        
        - **quake2-linux-amd64-$TAG.zip** - Optimized build for 64-bit x86 systems
        - **quake2-linux-amd64-$TAG-debug.zip** - Debug build for 64-bit x86 systems (includes debug symbols)
        - **quake2-linux-arm64-$TAG.zip** - Optimized build for 64-bit ARM systems
        - **quake2-linux-arm64-$TAG-debug.zip** - Debug build for 64-bit ARM systems (includes debug symbols)
        
        ## Installation
        
        1. Download the appropriate archive for your system architecture
        2. Extract the contents to your desired location
        3. Make sure you have the required dependencies installed:
           - OpenGL drivers
           - SDL2 (\`libsdl2-2.0-0\`)
           - OpenAL (\`libopenal1\`)
        
        ## Package Contents
        
        Each package contains:
        - \`quake2\` - Main game executable
        - \`q2ded\` - Dedicated server executable
        - \`baseq2/game.so\` - Game logic library
        - \`ref_gl1.so\` - OpenGL 1.x renderer
        - \`ref_gl3.so\` - OpenGL 3.2 renderer
        - \`ref_gles3.so\` - OpenGL ES 3.0 renderer
        - \`ref_soft.so\` - Software renderer
        
        ## Usage
        
        \`\`\`bash
        ./quake2 +set vid_renderer gl3
        \`\`\`
        
        ## Notes
        
        - This build is based on the upstream Yamagi Quake II repository
        - Debug builds include debugging symbols and are larger in size
        - For more information, visit the [official Yamagi Quake II website](https://www.yamagi.org/quake2/)
        
        ---
        
        *This release was automatically generated from the upstream repository.*
        EOF
          
          # Create the release
          gh release create "$TAG" \
            --title "Yamagi Quake II $TAG - Multi-arch Linux Build" \
            --notes-file release-notes.md \
            --latest \
            ./release-assets/*.zip
        fi

  cleanup:
    needs: [create-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Cleanup artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          quake2-linux-amd64-*
          quake2-linux-arm64-*
        failOnError: false
